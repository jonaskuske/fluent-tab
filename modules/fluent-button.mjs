// see https://codepen.io/21stCenturyJonas/pen/gQGXdd
export default class FluentButton { constructor(a, { text: b, icon: c, nodeType: d, outerReveal: e }) { this.el = 'string' == typeof a ? document.querySelector(a) : a; FluentButton.elements.has(this.el) || (FluentButton.elements.add(this.el), this.el.classList.add('fluent-btn'), this.el.innerHTML = FluentButton.createHTML({ text: b, icon: c, nodeType: d }), this.el.onclick = this.startRipple, this.el.addEventListener('mousedown', this.startRipple), this.el.onmousedown = this.el.ontouchstart = this.addPressedState, this.el.onmouseup = this.el.onmouseleave = this.el.ontouchend = this.removePressedState, e ? (FluentButton.outerRevealElements.set(a, this.getElementDimensions(a)), !FluentButton.observingOuterReveal && this.observeOuterReveal()) : this.el.onmousemove = this.updateCoordinates) } updateCoordinates({ pageX: a, pageY: b, currentTarget: c }) { const d = a - c.offsetLeft, e = b - c.offsetTop; return c.style.setProperty('--x', `${d}px`), c.style.setProperty('--y', `${e}px`), { x: d, y: e } } startRipple({ currentTarget: a }) { a.classList.remove('fluent-btn--ripple'), setTimeout(() => a.classList.add('fluent-btn--ripple'), 25) } addPressedState({ currentTarget: a }) { a.classList.add('fluent-btn--pressed') } removePressedState({ currentTarget: a }) { a.classList.remove('fluent-btn--pressed') } observeOuterReveal() { FluentButton.observingOuterReveal = !0, window.addEventListener('resize', this.updateElementDimensions.bind(this)), window.addEventListener('mousemove', a => { window.requestAnimationFrame(this.updateOuterReveal.bind(this, a)) }), window.addEventListener('touchmove', ({ touches: a }) => { const [{ clientX: b, clientY: c }] = a; window.requestAnimationFrame(this.updateOuterReveal.bind(this, { pageX: b, pageY: c })) }) } updateOuterReveal({ pageX: a, pageY: b }) { for (const [c, { width: d, height: e }] of FluentButton.outerRevealElements) { const { x: f, y: g } = this.updateCoordinates({ pageX: a, pageY: b, currentTarget: c }); this.isInRevealThreshold({ x: f, y: g, width: d, height: e }) ? c.classList.add('fluent-btn--reveal') : c.classList.remove('fluent-btn--reveal') } } isInRevealThreshold({ x: a, y: b, width: c, height: d }) { const e = FluentButton.outerRevealThreshold; return a > -e && a < c + e && b > -e && b < d + e } getElementDimensions(a) { const { width: b, height: c } = a.getBoundingClientRect(); return { width: b, height: c } } updateElementDimensions() { for (const [a] of FluentButton.outerRevealElements) FluentButton.outerRevealElements.set(a, this.getElementDimensions(a)) } destroy() { this.el.classList.remove('fluent-btn'), this.el.innerHTML = '', FluentButton.elements.delete(this.el), FluentButton.outerRevealElements.delete(this.el) } } FluentButton.elements = new Set, FluentButton.outerRevealElements = new Map, FluentButton.outerRevealThreshold = 75, FluentButton.observingOuterReveal = !1, FluentButton.createHTML = ({ text: a, icon: b, nodeType: c }) => `
    <${c || 'button'} class="fluent-btn__btn">
      <span class="fluent-btn__icon" style="background-image: url(${b})"></span>
      <span class="fluent-btn__txt">${a}</span>
    </${c || 'button'}>`;
const c = `.fluent-btn__btn,.fluent-btn__txt{overflow:hidden;text-overflow:ellipsis}.fluent-btn{--color:#353535;z-index:0;transition:-webkit-transform .2s ease;transition:transform .2s ease;transition:transform .2s ease,-webkit-transform .2s ease;transform:translate3d(0,0,0)}.fluent-btn.focus-visible{outline:rgba(255,255,255,.6) solid 2px}.fluent-btn:focus-visible{outline:rgba(255,255,255,.6) solid 2px}.fluent-btn--pressed{-webkit-transform:scale(.97);transform:scale(.97)}.fluent-btn__icon{background:center/contain no-repeat var(--icon-bg,transparent);width:1.8em;height:1.8em;padding:5px;box-sizing:border-box;margin:5px .8em}.fluent-btn__txt{margin:.6em .8em;text-align:left;letter-spacing:.5px;white-space:nowrap;max-width:82%}.fluent-btn__btn{position:relative;width:10rem;height:6rem;display:flex;flex-flow:column;justify-content:flex-end;align-items:flex-start;padding:2px;color:var(--txt-clr,#fff);font:inherit;font-size:14px;text-align:center;letter-spacing:1px;border:none;background:var(--color) content-box;box-shadow:0 14px 30px rgba(0,0,0,.15)}.fluent-btn__btn::after,.fluent-btn__btn::before{content:'';position:absolute}.fluent-btn__btn::before{will-change:top,left;right:0;width:100%;height:100%;background:inherit;transition:all .2s ease,opacity .6s ease,-webkit-transform 0s ease;transition:all .2s ease,transform 0s ease,opacity .6s ease;transition:all .2s ease,transform 0s ease,opacity .6s ease,-webkit-transform 0s;-webkit-transform:translate(-50%,-50%) scale(5);transform:translate(-50%,-50%) scale(5);z-index:-1}.fluent-btn--reveal .fluent-btn__btn::before,.fluent-btn__btn:hover::before{top:0;left:0;transform:translate(-50%,-50%) translate(var(--x),var(--y)) scale(5);opacity:.9;background:radial-gradient(circle 20px,rgba(255,255,255,.9) 15%,transparent) var(--color)}.fluent-btn--reveal .fluent-btn__btn:hover::before{opacity:1;background:radial-gradient(circle 20px,rgba(255,255,255,1) 15%,rgba(255,255,255,.2)) var(--color)}.fluent-btn__btn::after{left:0;top:0;width:0;height:0;opacity:.3;background:radial-gradient(circle closest-side,rgba(255,255,255,.2),transparent);-webkit-transform:translate(-50%,-50%);transform:translate(-50%,-50%) translate(var(--x),var(--y))}.fluent-btn__btn:hover::after{width:250%;height:250%}.fluent-btn--pressed .fluent-btn__btn::before,.fluent-btn--pressed.fluent-btn--reveal .fluent-btn__btn::before{background:inherit}.fluent-btn--ripple .fluent-btn__btn::after{-webkit-animation:ripple 1.1s cubic-bezier(.41,0,.35,.89) forwards;animation:ripple 1.1s cubic-bezier(.41,0,.35,.89) forwards}@-webkit-keyframes ripple{0%{opacity:.5}70%{opacity:.65}100%{-webkit-transform:translate(-50%,-50%) translate(var(--x),var(--y)) scale(2.4);transform:translate(-50%,-50%) translate(var(--x),var(--y)) scale(2.4)}}@keyframes ripple{0%{opacity:.5}70%{opacity:.65}100%{-webkit-transform:translate(-50%,-50%) translate(var(--x),var(--y)) scale(2.4);transform:translate(-50%,-50%) translate(var(--x),var(--y)) scale(2.4)}}`, s = document.createElement('style'); s.innerText = c; document.head.append(s);