export class FluentButton { constructor(a, { text: b, icon: c, nodeType: d, outerReveal: e }) { this.el = 'string' == typeof a ? document.querySelector(a) : a; FluentButton.elements.has(this.el) || (FluentButton.elements.add(this.el), this.el.classList.add('fluent-btn'), this.el.innerHTML = FluentButton.createHTML({ text: b, icon: c, nodeType: d }), this.el.onclick = this.startRipple, this.el.addEventListener('mousedown', this.startRipple), this.el.onmousedown = this.el.ontouchstart = this.addPressedState, this.el.onmouseup = this.el.onmouseleave = this.el.ontouchend = this.removePressedState, e ? (FluentButton.outerRevealElements.set(a, this.getElementDimensions(a)), !FluentButton.observingOuterReveal && this.observeOuterReveal()) : this.el.onmousemove = this.updateCoordinates) } updateCoordinates({ pageX: a, pageY: b, currentTarget: c }) { const d = a - c.offsetLeft, e = b - c.offsetTop; return c.style.setProperty('--x', `${d}px`), c.style.setProperty('--y', `${e}px`), { x: d, y: e } } startRipple({ currentTarget: a }) { a.classList.remove('fluent-btn--ripple'), setTimeout(() => a.classList.add('fluent-btn--ripple'), 25) } addPressedState({ currentTarget: a }) { a.classList.add('fluent-btn--pressed') } removePressedState({ currentTarget: a }) { a.classList.remove('fluent-btn--pressed') } observeOuterReveal() { FluentButton.observingOuterReveal = !0, window.addEventListener('resize', this.updateElementDimensions.bind(this)), window.addEventListener('mousemove', a => { window.requestAnimationFrame(this.updateOuterReveal.bind(this, a)) }), window.addEventListener('touchmove', ({ touches: a }) => { const [{ clientX: b, clientY: c }] = a; window.requestAnimationFrame(this.updateOuterReveal.bind(this, { pageX: b, pageY: c })) }) } updateOuterReveal({ pageX: a, pageY: b }) { for (const [c, { width: d, height: e }] of FluentButton.outerRevealElements) { const { x: f, y: g } = this.updateCoordinates({ pageX: a, pageY: b, currentTarget: c }); this.isInRevealThreshold({ x: f, y: g, width: d, height: e }) ? c.classList.add('fluent-btn--reveal') : c.classList.remove('fluent-btn--reveal') } } isInRevealThreshold({ x: a, y: b, width: c, height: d }) { const e = FluentButton.outerRevealThreshold; return a > -e && a < c + e && b > -e && b < d + e } getElementDimensions(a) { const { width: b, height: c } = a.getBoundingClientRect(); return { width: b, height: c } } updateElementDimensions() { for (const [a] of FluentButton.outerRevealElements) FluentButton.outerRevealElements.set(a, this.getElementDimensions(a)) } destroy() { this.el.classList.remove('fluent-btn'), this.el.innerHTML = '', FluentButton.elements.delete(this.el), FluentButton.outerRevealElements.delete(this.el) } } FluentButton.elements = new Set, FluentButton.outerRevealElements = new Map, FluentButton.outerRevealThreshold = 75, FluentButton.observingOuterReveal = !1, FluentButton.createHTML = ({ text: a, icon: b, nodeType: c }) => `
    <${c || 'button'} class="fluent-btn__btn">
      <span class="fluent-btn__icon" style="background-image: url(${b})"></span>
      <span class="fluent-btn__txt">${a}</span>
    </${c || 'button'}>`;